PIDController writeup: 

At the start, we initialize the PID Control Gains to a default value.
		InitialControlGainsSensor:

			Depending on the desired pressure we need and the pressure during the starting phase, 
			We are changing the kp, ki, kd gains based on the pressure at the starting phase.
		
			If the desired pressure is too high and the current pressure is well below the desired pressure.
			kp is increased to reach the desired pressure quickly. ki and kd are still low.
	
			If the desired pressure is high and the current pressure is close to the desired pressure.
			kp is reduced since we are close to reaching the desired pressure. ki and kd are increased since the pressure is already near the desired pressure at the starting phase.

			If the desired pressure is too low and the current pressure limits is well above the desired pressure. 
			kp is slightly increased since we need to desired pressure quickly. ki and kd are slightly increased too to reduce oscillations when we are nearing the desired pressure.

		InitialControlGainsValve: 
			Checks if the onTime is less than 50 percent of the OffTime. If thats the case, kp, ki and kd are all increased at the start to make sure the current pressure is near the desired pressure at the start. This make sures the desired pressure is achieved within the given time duration. 
			If thats the case, the proportional controller is increased to make sure that the time period of the valves is optimized for the given onTime of the valves. Derivative and integral Gains are slightly below the proportional control gains since we are concentrating more on getting near the desired pressure within the given OnTime duration. 
			Checks if the onTime is greater than 50 percent of the OffTime. If thats the case, integral and derivative gains are made higher than the proportional gain to make sure that there are no oscillations while reaching the desired pressure. Since the onTime is higher than the offTime, we can clearly say that the pressure rate will be higher. However, there might be certain cases where the current pressure is well above the desired pressure. In such cases, we are making sure that the error is not too large by keeping the proportional gain above 0.5;

		ControllerComp:
			For every valve, during the start of OnTime,
				Adjusts the gains if the error at the next time step is higher than the error at the prev time step. 
				kd is increased to avoid overshoot. kp remains the same more or less. 
				ki is slightly decreased to avoid overshoot and reduce cumulative error.
				If the error at the next time step is smaller than or equal to error at the previous time step, kd is decreased to avoid unnecessary error accumulations. ki remains the same.
			
			If we are reaching the end of OnTime:
				Increase the gains and make the error as small as possible as we are reaching the end of OnTime.
				kp is increased if the error at the next time step is higher than the error at the prev time step. kd is increased to avoid overshoot. ki is slightly increased to avoid overshoot and reduce cumulative error.
				
				kd is reduced to make sure there is no overshoot and the error stays close to 0.// if error is lesser than that of previous state. We are increasing ki again when compared to the previous case to reduce oscillations.

			During the offTime of one particular valve, we are checking if the error is significantly larger during the last few time states. If there is a significant error during the last few time states, we have to check if the pressure at the pressure sensor is above/below the desired pressure. We have to close/open the subsequent valves accordingly.
				We are increasing proportional and integral gains to reduce the error and oscillations. 
				If the error accumulation increases largely, we change the PD gains.
					In addition to changing the PD gains we are making sure that the onTime and offSet of valve set (1,3) and (2,4) is altered to decrease oxygen flow. 
				If the error accumulation decreases, we are making sure that the pressure rate increases by increasing the on Time duration of alternate valves and decreasing the onTime duration of adjacent valves.
			
		ImplementController: Sums up the aggregate of gains from all the test cases mentioned before by taking into account all the functions. 
					     Changes the timing of alternate set of valves by a simple feedback loop. 

			
	

